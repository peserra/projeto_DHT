syntax = "proto3";

service DhtOperations {
    
    //JOINING

    // busca quem e o node que sera o sucessor do ingressante
    // mensagem enviada por cada node ao seu sucessor
    rpc FindNext (Join) returns (Void);

    // enviado pelo node ao ingressante
    rpc SendJoiningPosition (JoinOk) returns (Void);
    
    // enviado para o predecessor do ingressante ajustar seu next
    rpc AdjustPredJoin (NewNode) returns (Void);

    // LEAVING

    // enviado para o sucessor, para ajustar seu predecessor
    rpc AdjustNextLeave (Leave) returns (Void);

    // enviado para o predecessor, para ajustar seu next
    rpc AdjustPredLeave (NodeGone) returns (Void);


    // GETTING ITEMS
    rpc StoreItem (Store) returns (Void);

    rpc RetrieveItem (Retrieve) returns (Void);

    rpc SendItem (Ok) returns (Void);

    rpc SendNotFound (NotFound) returns (Void);

    // Transfering
    // mensagens SAEM de um node e vao para outro
    rpc TransferItems (Void) returns (stream Transfer);

}

// ########################### SUPPORT MESSAGES #################################

message Void {}

message NodeInfo {
    string id = 1; // id de um node eh o hash de IP:PORT
    string ip_addr = 2;
    uint32 port = 3;
}

//  ################################ JOINING  ###################################################

// enviada pelo node que quer ingressar
message Join {
    NodeInfo joining_node = 1;
}

// enviada PARA o node que quer ingressar
message JoinOk {
    NodeInfo next_node = 1; // node que esta enviando esta mensagem
    NodeInfo prev_node = 2; // atual predecessor deste node
}

// enviada ao predecessor do node ingressante, apos receber o join_ok, para que este atualize seu sucessor
message NewNode {
    NodeInfo joining_node = 1;
}

// ##################################  LEAVING  ###############################################

// enviada por um node para seu sucessor, quando ele deseja sair da DHT
message Leave {
    NodeInfo leaving_node_pred = 1;
}

// enviada pelo node saindo ao seu predecessor, para que ele ajuste seu sucessor 
message NodeGone {
    NodeInfo leaving_node_next = 1;
}

// ################################### FUNCTIONALITIES #############################################

message Store {
    string key = 1;
    uint32 obj_size = 2;
    bytes value = 3;
}

message Retrieve {
    string key = 1;
    NodeInfo searching_node = 2;
}

// resposta enviada pelo retrieve no node responsavel
message Ok {
    string key = 1;
    uint32 obj_size = 2;
    bytes value = 3;
}

message NotFound {}

message Transfer {
    string key = 1;
    bytes value = 2;
}
